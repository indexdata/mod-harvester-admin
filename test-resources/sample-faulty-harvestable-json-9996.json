{
  "type": "xmlBulk",
  "allowErrors": "false",
  "cacheEnabled": "false",
  "contactNotes": "",
  "currentStatus": "OK",
  "description": "",
  "diskRun": "false",
  "enabled": "true",
  "harvestImmediately": "false",
  "id": "9996",
  "initiallyHarvested": "2011-12-28T21:22:32Z",
  "json": "",
  "lastHarvestFinished": "2015-06-10T10:32:11Z",
  "lastHarvestStarted": "2015-06-10T10:10:00Z",
  "lastUpdated": "2014-09-24T08:33:27Z",
  "laxParsing": "false",
  "logLevel": "DEBUG",
  "mailAddress": "",
  "mailLevel": "WARN",
  "maxSavedFailedRecordsPerRun": "100",
  "maxSavedFailedRecordsTotal": "1000",
  "nameX": "HTTPS test modified 1",
  "openAccess": "true",
  "overwrite": "true",
  "retryCount": "2",
  "retryWait": "60",
  "scheduleString": "10 10 10 6 *",
  "serviceProvider": "Index Data",
  "storage": {
    "entityType": "solrStorageEntity",
    "bulkSize": "1000",
    "currentStatus": "TODO",
    "description": "Solr at localhost:8983",
    "enabled": "true",
    "id": "103",
    "idAsString": "103",
    "name": "Solr 4 @ localhost"
  },
  "storeOriginal": "false",
  "technicalNotes": "",
  "timeout": "60",
  "transformation": {
    "entityType": "basicTransformation",
    "description": "",
    "enabled": "true",
    "name": "Marc XML",
    "stepAssociations": [
      {
        "id": "3002",
        "position": "1",
        "step": {
          "entityType": "xmlTransformationStep",
          "customClass": "PZ",
          "description": "Convert MARCXML to PZ",
          "enabled": "true",
          "inputFormat": "",
          "name": "MARC21 to PZ",
          "outputFormat": "",
          "script": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<xsl:stylesheet\r\n    version=\"1.0\"\r\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n    xmlns:pz=\"http://www.indexdata.com/pazpar2/1.0\"\r\n    xmlns:marc=\"http://www.loc.gov/MARC21/slim\">\r\n\r\n  \r\n  <xsl:output indent=\"yes\" method=\"xml\" version=\"1.0\" encoding=\"UTF-8\"/>\r\n\r\n<!-- Extract metadata from MARC21/USMARC \r\n      http://www.loc.gov/marc/bibliographic/ecbdhome.html\r\n-->  \r\n  <xsl:include href=\"pz2-ourl-marc21.xsl\" />\r\n\r\n  <xsl:template match=\"/\">\r\n    <pz:collection> \r\n      <xsl:apply-templates />\r\n    </pz:collection>\r\n  </xsl:template>        \r\n  \r\n  <xsl:template match=\"//delete\">\r\n <xsl:copy-of select=\".\"/>                                                                                                                                                                               \r\n  </xsl:template> \r\n  \r\n  <xsl:template match=\"//marc:record\">\r\n    <xsl:variable name=\"title_medium\" select=\"marc:datafield[@tag='245']/marc:subfield[@code='h']\"/>\r\n    <xsl:variable name=\"journal_title\" select=\"marc:datafield[@tag='773']/marc:subfield[@code='t']\"/>\r\n    <xsl:variable name=\"electronic_location_url\" select=\"marc:datafield[@tag='856']/marc:subfield[@code='u']\"/>\r\n    <xsl:variable name=\"fulltext_a\" select=\"marc:datafield[@tag='900']/marc:subfield[@code='a']\"/>\r\n    <xsl:variable name=\"fulltext_b\" select=\"marc:datafield[@tag='900']/marc:subfield[@code='b']\"/>\r\n    <xsl:variable name=\"medium\">\r\n      <xsl:choose>\r\n  <xsl:when test=\"$title_medium\">\r\n   <xsl:value-of select=\"substring-after(substring-before($title_medium,']'),'[')\"/>\r\n </xsl:when>\r\n <xsl:when test=\"$fulltext_a\">\r\n   <xsl:text>electronic resource</xsl:text>\r\n  </xsl:when>\r\n <xsl:when test=\"$fulltext_b\">\r\n   <xsl:text>electronic resource</xsl:text>\r\n  </xsl:when>\r\n <xsl:when test=\"$journal_title\">\r\n    <xsl:text>article</xsl:text>\r\n  </xsl:when>\r\n <xsl:otherwise>\r\n   <xsl:text>book</xsl:text>\r\n </xsl:otherwise>\r\n      </xsl:choose>\r\n    </xsl:variable>\r\n\r\n    <pz:record>      \r\n      <xsl:for-each select=\"marc:controlfield[@tag='001']\">\r\n        <pz:metadata type=\"id\">\r\n          <xsl:value-of select=\".\"/>\r\n        </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='010']\">\r\n        <pz:metadata type=\"lccn\">\r\n   <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='020']\">\r\n        <pz:metadata type=\"isbn\">\r\n    <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='022']\">\r\n        <pz:metadata type=\"issn\">\r\n    <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='027']\">\r\n        <pz:metadata type=\"tech-rep-nr\">\r\n   <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='035']\">\r\n        <pz:metadata type=\"system-control-nr\">\r\n   <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='100']\">\r\n <pz:metadata type=\"author\">\r\n   <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"author-title\">\r\n   <xsl:value-of select=\"marc:subfield[@code='c']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"author-date\">\r\n    <xsl:value-of select=\"marc:subfield[@code='d']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='110']\">\r\n <pz:metadata type=\"corporate-name\">\r\n     <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"corporate-location\">\r\n     <xsl:value-of select=\"marc:subfield[@code='c']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"corporate-date\">\r\n     <xsl:value-of select=\"marc:subfield[@code='d']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='111']\">\r\n <pz:metadata type=\"meeting-name\">\r\n     <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"meeting-location\">\r\n     <xsl:value-of select=\"marc:subfield[@code='c']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"meeting-date\">\r\n     <xsl:value-of select=\"marc:subfield[@code='d']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='260']\">\r\n <pz:metadata type=\"date\">\r\n     <xsl:value-of select=\"marc:subfield[@code='c']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='245']\">\r\n        <pz:metadata type=\"title\">\r\n          <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n        </pz:metadata>\r\n        <pz:metadata type=\"title-remainder\">\r\n          <xsl:value-of select=\"marc:subfield[@code='b']\"/>\r\n        </pz:metadata>\r\n        <pz:metadata type=\"title-responsibility\">\r\n          <xsl:value-of select=\"marc:subfield[@code='c']\"/>\r\n        </pz:metadata>\r\n        <pz:metadata type=\"title-dates\">\r\n          <xsl:value-of select=\"marc:subfield[@code='f']\"/>\r\n        </pz:metadata>\r\n        <pz:metadata type=\"title-medium\">\r\n          <xsl:value-of select=\"marc:subfield[@code='h']\"/>\r\n        </pz:metadata>\r\n        <pz:metadata type=\"title-number-section\">\r\n          <xsl:value-of select=\"marc:subfield[@code='n']\"/>\r\n        </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='250']\">\r\n <pz:metadata type=\"edition\">\r\n      <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='260']\">\r\n        <pz:metadata type=\"publication-place\">\r\n   <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n        <pz:metadata type=\"publication-name\">\r\n   <xsl:value-of select=\"marc:subfield[@code='b']\"/>\r\n </pz:metadata>\r\n        <pz:metadata type=\"publication-date\">\r\n   <xsl:value-of select=\"marc:subfield[@code='c']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='300']\">\r\n <pz:metadata type=\"physical-extent\">\r\n    <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"physical-format\">\r\n    <xsl:value-of select=\"marc:subfield[@code='b']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"physical-dimensions\">\r\n    <xsl:value-of select=\"marc:subfield[@code='c']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"physical-accomp\">\r\n    <xsl:value-of select=\"marc:subfield[@code='e']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"physical-unittype\">\r\n    <xsl:value-of select=\"marc:subfield[@code='f']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"physical-unitsize\">\r\n    <xsl:value-of select=\"marc:subfield[@code='g']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"physical-specified\">\r\n   <xsl:value-of select=\"marc:subfield[@code='3']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='440']\">\r\n <pz:metadata type=\"series-title\">\r\n   <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag = '500' or @tag = '505' or @tag = '518' or @tag = '520' or @tag = '522']\">\r\n <pz:metadata type=\"description\">\r\n            <xsl:value-of select=\"*/text()\"/>\r\n        </pz:metadata>\r\n      </xsl:for-each>\r\n      \r\n      <xsl:for-each select=\"marc:datafield[@tag='600' or @tag='610' or @tag='611' or @tag='630' or @tag='648' or @tag='650' or @tag='651' or @tag='653' or @tag='654' or @tag='655' or @tag='656' or @tag='657' or @tag='658' or @tag='662' or @tag='69X']\">\r\n        <pz:metadata type=\"subject\">\r\n    <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"subject-long\">\r\n   <xsl:for-each select=\"marc:subfield\">\r\n     <xsl:if test=\"position() > 1\">\r\n        <xsl:text>, </xsl:text>\r\n     </xsl:if>\r\n     <xsl:value-of select=\".\"/>\r\n    </xsl:for-each>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='856']\">\r\n <pz:metadata type=\"electronic-url\">\r\n   <xsl:value-of select=\"marc:subfield[@code='u']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"electronic-text\">\r\n    <xsl:value-of select=\"marc:subfield[@code='y']\"/>\r\n </pz:metadata>\r\n  <pz:metadata type=\"electronic-note\">\r\n    <xsl:value-of select=\"marc:subfield[@code='z']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='773']\">\r\n        <pz:metadata type=\"citation\">\r\n          <xsl:for-each select=\"*\">\r\n            <xsl:value-of select=\"normalize-space(.)\"/>\r\n            <xsl:text> </xsl:text>\r\n          </xsl:for-each>\r\n        </pz:metadata>\r\n        <xsl:if test=\"marc:subfield[@code='t']\">\r\n          <pz:metadata type=\"journal-title\">\r\n            <xsl:value-of select=\"marc:subfield[@code='t']\"/>\r\n          </pz:metadata>\r\n        </xsl:if>\r\n        <xsl:if test=\"marc:subfield[@code='g']\">\r\n          <pz:metadata type=\"journal-subpart\">\r\n            <xsl:value-of select=\"marc:subfield[@code='g']\"/>\r\n          </pz:metadata>\r\n        </xsl:if>\r\n      </xsl:for-each>\r\n\r\n      <pz:metadata type=\"medium\">\r\n <xsl:value-of select=\"$medium\"/>\r\n      </pz:metadata>\r\n      \r\n      <xsl:for-each select=\"marc:datafield[@tag='900']/marc:subfield[@code='a']\">\r\n        <pz:metadata type=\"fulltext\">\r\n          <xsl:value-of select=\".\"/>\r\n        </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <!-- <xsl:if test=\"$fulltext_a\">\r\n <pz:metadata type=\"fulltext\">\r\n   <xsl:value-of select=\"$fulltext_a\"/>\r\n  </pz:metadata>\r\n      </xsl:if> -->\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='900']/marc:subfield[@code='b']\">\r\n        <pz:metadata type=\"fulltext\">\r\n          <xsl:value-of select=\".\"/>\r\n        </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <!-- <xsl:if test=\"$fulltext_b\">\r\n  <pz:metadata type=\"fulltext\">\r\n   <xsl:value-of select=\"$fulltext_b\"/>\r\n  </pz:metadata>\r\n      </xsl:if> -->\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='907' or @tag='901']\">\r\n        <pz:metadata type=\"iii-id\">\r\n    <xsl:value-of select=\"marc:subfield[@code='a']\"/>\r\n </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='926']\">\r\n        <pz:metadata type=\"holding\">\r\n   <xsl:for-each select=\"marc:subfield\">\r\n     <xsl:if test=\"position() > 1\">\r\n        <xsl:text> </xsl:text>\r\n      </xsl:if>\r\n     <xsl:value-of select=\".\"/>\r\n    </xsl:for-each>\r\n        </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='948']\">\r\n        <pz:metadata type=\"holding\">\r\n    <xsl:for-each select=\"marc:subfield\">\r\n     <xsl:if test=\"position() > 1\">\r\n        <xsl:text> </xsl:text>\r\n      </xsl:if>\r\n     <xsl:value-of select=\".\"/>\r\n    </xsl:for-each>\r\n        </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:for-each select=\"marc:datafield[@tag='991']\">\r\n        <pz:metadata type=\"holding\">\r\n    <xsl:for-each select=\"marc:subfield\">\r\n     <xsl:if test=\"position() > 1\">\r\n        <xsl:text> </xsl:text>\r\n      </xsl:if>\r\n     <xsl:value-of select=\".\"/>\r\n    </xsl:for-each>\r\n        </pz:metadata>\r\n      </xsl:for-each>\r\n\r\n      <xsl:if test=\"$open_url_resolver\">\r\n        <pz:metadata type=\"open-url\">\r\n            <xsl:call-template name=\"insert-md-openurl\" />\r\n        </pz:metadata>\r\n      </xsl:if>\r\n\r\n      <!--passthrough id data-->\r\n      <xsl:for-each select=\"pz:metadata\">\r\n          <xsl:copy-of select=\".\"/>\r\n      </xsl:for-each>\r\n\r\n    </pz:record>    \r\n  </xsl:template>\r\n\r\n  \r\n  <xsl:template match=\"text()\"/>\r\n\r\n</xsl:stylesheet>",
          "id": "22",
          "testData": "MARCXML",
          "type": ""
        },
        "transformation": "2953"
      },
      {
        "id": "4357",
        "position": "3",
        "step": {
          "entityType": "xmlTransformationStep",
          "customClass": "PZ",
          "description": "Medium cleanup",
          "inputFormat": "",
          "name": "Medium Normalization (PZ)",
          "outputFormat": "",
          "script": "<?xml version=\"1.0\"?>\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" \r\n    xmlns:pz=\"http://www.indexdata.com/pazpar2/1.0\" \r\n    xmlns:tmarc=\"http://www.indexdata.com/turbomarc\">\r\n\r\n  <xsl:output indent=\"yes\" method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" />\r\n  <xsl:template  match=\"/\">\r\n    <pz:collection>\r\n      <xsl:apply-templates/>\r\n    </pz:collection>\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"pz:record\">\r\n    <pz:record>\r\n      <xsl:apply-templates/>\r\n    </pz:record>\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"pz:metadata[@type='medium']\">\r\n    <pz:metadata type='medium'>\r\n      <xsl:choose>\r\n        <xsl:when \r\n     test=\". = 'article' or . = 'audio-visual' or . = 'article (electronic)' or \r\n    . = 'book' or . = 'book (electronic)' or \r\n     . = 'electronicresource' or . = 'electronic' or\r\n     . = 'journal (electronic)' or . = 'journal' or \r\n     . = 'map (electronic)' or . = 'map' or \r\n     . = 'microform' or . = 'music-score' or . = 'music-score (electronic)' or \r\n    . = 'newspaper' or . = 'newspaper (electronic)' or\r\n    . = 'recording' or . = 'recording (electronic)' or . = 'recording-cd' or . = 'recording-cassette' or . = 'recording-vinyl' or \r\n    . = 'soundrecording' or \r\n    . = 'thesis (electronic)' or . = 'thesis' or\r\n    . = 'video-dvd' or . = 'video-vhs' or . = 'video (electronic)' or . = 'video' or . = 'videorecording' or . = 'video' or . = 'video-blu-ray'  or\r\n     . = 'web' or . = 'web (eletronic)' or\r\n     . = 'realia' or . = 'picture' or \r\n     . = 'other' \r\n    \">\r\n          <xsl:value-of select=\".\"/>\r\n        </xsl:when>\r\n        <!-- Correct some typical differences -->\r\n        <xsl:when test=\". = 'sound recording(dc)'\"> \r\n            <xsl:text>recording-cd</xsl:text>\r\n        </xsl:when>         \r\n        <xsl:when test=\". = 'videorecording(dvd)'\">\r\n            <xsl:text>video-dvd</xsl:text>\r\n        </xsl:when>         \r\n        <xsl:when \r\n         test=\". = 'electronic resource' or . = 'electronisk resours' \" >\r\n          <xsl:text>electronicresource</xsl:text>\r\n        </xsl:when>\r\n        <xsl:otherwise>\r\n          <xsl:text>other</xsl:text>\r\n        </xsl:otherwise>\r\n      </xsl:choose>\r\n    </pz:metadata>\r\n  </xsl:template>\r\n  \r\n  <xsl:template match=\"pz:metadata\"> \r\n    <xsl:copy-of select=\".\" />\r\n  </xsl:template>\r\n  \r\n  <xsl:template match=\"text()\" />\r\n</xsl:stylesheet>\r\n",
          "id": "4055",
          "testData": "PZ",
          "type": ""
        },
        "transformation": "2953"
      },
      {
        "id": "4456",
        "position": "3",
        "step": {
          "entityType": "xmlTransformationStep",
          "customClass": "PZ",
          "description": "Split a ; delimited list into multiple authors",
          "inputFormat": "",
          "name": "Author split by ;",
          "outputFormat": "",
          "script": "<?xml version=\"1.0\"?>\r\n<xsl:stylesheet version=\"2.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n                xmlns:pz=\"http://www.indexdata.com/pazpar2/1.0\"\r\n                xmlns:tmarc=\"http://www.indexdata.com/turbomarc\">\r\n\r\n  <xsl:output indent=\"yes\" method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" />\r\n  <xsl:template  match=\"/\">\r\n    <pz:collection>\r\n      <xsl:apply-templates/>\r\n    </pz:collection>\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"pz:record\">\r\n    <pz:record>\r\n      <xsl:apply-templates/>\r\n    </pz:record>\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"pz:metadata[@type='author']\">\r\n      <xsl:for-each select=\"tokenize(.,';')\">\r\n        <pz:metadata type=\"author\"><xsl:value-of select=\"normalize-space(.)\" /></pz:metadata>\r\n      </xsl:for-each>\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"pz:metadata\">\r\n    <xsl:copy-of select=\".\" />\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"text()\" />\r\n</xsl:stylesheet>",
          "id": "4403",
          "testData": "PZ",
          "type": "XSLT"
        },
        "transformation": "2953"
      },
      {
        "id": "4452",
        "position": "4",
        "step": {
          "entityType": "xmlTransformationStep",
          "customClass": "PZ",
          "description": "Map to one",
          "inputFormat": "",
          "name": "Anonymous normalization",
          "outputFormat": "",
          "script": "<?xml version=\"1.0\"?>\r\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" \r\n   xmlns:pz=\"http://www.indexdata.com/pazpar2/1.0\" \r\n    xmlns:tmarc=\"http://www.indexdata.com/turbomarc\">\r\n\r\n  <xsl:output indent=\"yes\" method=\"xml\" version=\"1.0\" encoding=\"UTF-8\" />\r\n  <xsl:template  match=\"/\">\r\n    <pz:collection>\r\n      <xsl:apply-templates/>\r\n    </pz:collection>\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"pz:record\">\r\n    <pz:record>\r\n      <xsl:apply-templates/>\r\n    </pz:record>\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"pz:metadata[@type='author']\">\r\n    <pz:metadata type='author'>\r\n      <xsl:choose>\r\n        <xsl:when \r\n     test=\". = 'ANON'   or . = 'Anon'   or . = 'anon'   or \r\n     . = 'ANON)'  or . = 'Anon)'  or . = 'anon)'  or \r\n    . = 'ANON.)' or . = 'Anon.)' or . = 'anon.)' or\r\n                 . = 'ANON]'  or . = 'Anon]'  or . = 'anon]'  or \r\n    . = 'ANON.]' or . = 'Anon.]' or . = 'anon.]' or \r\n    . = 'Anon.,' or . = 'anon). / anon' or\r\n    . = 'ANONYMOUS' or . = 'anonymous' or \r\n    . = 'Anonymous (editor)' or . = 'Anonymous Editor' or \r\n    . = 'anonymous]' or . = 'Anonymous]' or . = 'ANONYMOUS]' or\r\n     . = 'ANONYMOUS)' or . = 'Anonymous)' or  . = 'anonymous)'  \r\n\r\n     \">\r\n          <xsl:text>Anonymous</xsl:text>\r\n        </xsl:when>\r\n        <xsl:otherwise>\r\n          <xsl:value-of select=\".\"/>\r\n        </xsl:otherwise>\r\n      </xsl:choose>\r\n    </pz:metadata>\r\n  </xsl:template>\r\n  \r\n  <xsl:template match=\"pz:metadata\"> \r\n    <xsl:copy-of select=\".\" />\r\n  </xsl:template>\r\n  \r\n  <xsl:template match=\"text()\" />\r\n</xsl:stylesheet>\r\n",
          "id": "4402",
          "testData": "<records xmlns:pz=\"http://www.indexdata.com/pazpar2/1.0\">\r\n  <pz:record>\r\n    <pz:metadata type=\"author\">ANON</pz:metadata>\r\n  </pz:record>\r\n</records>",
          "testOutput": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<pz:collection xmlns:pz=\"http://www.indexdata.com/pazpar2/1.0\" xmlns:tmarc=\"http://www.indexdata.com/turbomarc\">\r\n<pz:record>\r\n<pz:metadata type=\"author\">Anonymous</pz:metadata>\r\n</pz:record>\r\n</pz:collection>\r\n",
          "type": "XSLT"
        },
        "transformation": "2953"
      },
      {
        "id": "4454",
        "position": "6",
        "step": {
          "entityType": "xmlTransformationStep",
          "customClass": "PZ",
          "description": "",
          "inputFormat": "",
          "name": "Create ID (if missing)",
          "outputFormat": "",
          "script": "<xsl:stylesheet version=\"2.0\" \r\n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n  xmlns:pz=\"http://www.indexdata.com/pazpar2/1.0\" >\r\n  <xsl:output indent=\"yes\" method=\"xml\"/>\r\n\r\n  <xsl:template match=\"@* | node()\">\r\n    <xsl:copy>\r\n      <xsl:apply-templates select=\"@* | node()\"/>\r\n    </xsl:copy>\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"pz:record\"> \r\n    <pz:record>\r\n      <xsl:if test=\"not(pz:metadata[@type='id'])\">\r\n        <pz:metadata type=\"id\">\r\n          <xsl:value-of select=\"pz:metadata[@type='author']\" />\r\n          <xsl:text> - </xsl:text>\r\n          <xsl:value-of select=\"pz:metadata[@type='title']\" />\r\n          <xsl:text> - </xsl:text>\r\n          <xsl:value-of select=\"pz:metadata[@type='date']\" />\r\n        </pz:metadata>\r\n        <xsl:apply-templates />\r\n      </xsl:if>\r\n      <xsl:if test=\"pz:metadata[@type='id']\">\r\n        <xsl:apply-templates />\r\n      </xsl:if>\r\n    </pz:record>\r\n  </xsl:template>\r\n\r\n</xsl:stylesheet>\r\n",
          "id": "4405",
          "testData": "PZ",
          "type": "XSLT"
        },
        "transformation": "2953"
      },
      {
        "id": "4455",
        "position": "6",
        "step": {
          "entityType": "xmlTransformationStep",
          "customClass": "PZ",
          "description": "Implement a previous hardcoded rule in pazpar2",
          "inputFormat": "",
          "name": "End Punctuation removal",
          "outputFormat": "",
          "script": "<?xml version=\"1.0\"?>\r\n<xsl:stylesheet version=\"2.0\" \r\n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n  xmlns:pz=\"http://www.indexdata.com/pazpar2/1.0\" >\r\n  <xsl:output indent=\"yes\" method=\"xml\"/>\r\n\r\n\r\n  <xsl:template match=\"@* | node()\">\r\n    <xsl:copy>\r\n      <xsl:apply-templates select=\"@* | node()\"/>\r\n    </xsl:copy>\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"pz:metadata[@type='subject']/text()\">\r\n    <xsl:call-template name=\"remove-characters-last\">\r\n      <xsl:with-param  name=\"input\" select=\".\" />\r\n      <xsl:with-param  name=\"characters\">,-.</xsl:with-param>\r\n    </xsl:call-template>\r\n  </xsl:template>\r\n\r\n  <xsl:template match=\"pz:metadata[@type='author']/text()\">\r\n    <xsl:call-template name=\"remove-characters-last\">\r\n      <xsl:with-param  name=\"input\" select=\".\" />\r\n      <xsl:with-param  name=\"characters\">,-.</xsl:with-param>\r\n    </xsl:call-template>\r\n  </xsl:template>\r\n\r\n\r\n  <xsl:template name=\"remove-characters-last\">\r\n    <xsl:param name=\"input\" />\r\n    <xsl:param name=\"characters\"/>\r\n    <xsl:variable name=\"lastcharacter\" select=\"substring($input,string-length($input))\" />\r\n    <xsl:choose>\r\n      <xsl:when test=\"$characters and $lastcharacter and contains($characters, $lastcharacter)\">\r\n        <xsl:call-template name=\"remove-characters-last\">\r\n          <xsl:with-param  name=\"input\" select=\"substring($input,1, string-length($input)-1)\" />\r\n          <xsl:with-param  name=\"characters\" select=\"$characters\" />\r\n        </xsl:call-template>\r\n      </xsl:when>\r\n      <xsl:otherwise>\r\n        <xsl:value-of select=\"$input\"/>\r\n      </xsl:otherwise>\r\n    </xsl:choose>\r\n  </xsl:template>\r\n</xsl:stylesheet>\r\n",
          "id": "4404",
          "testData": "PZ",
          "type": "XSLT"
        },
        "transformation": "2953"
      }
    ],
    "id": "2953"
  },
  "allowCondReq": "false",
  "expectedSchema": "",
  "outputSchema": "",
  "passiveMode": "false",
  "recurse": "false",
  "splitAt": "1",
  "splitSize": "1000",
  "url": "https://www.loc.gov/cds/downloads/MDSConnect/Computer.Files.2016.part01.xml.gz"
}

